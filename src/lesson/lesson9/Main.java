package lesson.lesson9;

public class Main {

    /*
     * одно имя метода и разные аргументы - оверлоад, презагрузка метода
     * можно написать вариантов етода столько сколько нам нужно
     * до тех пока кол-во и порядок их типом у каждого мтеоа будет отличаться рт другух
     * сигнатура мтеода или метод сигнача
     * джава не сомтрит на название смотрит на порядок и типы
     * это оверлоад
     * при наличии нескольких мтеодом выбирается подходящий
     *
     *  есть механищзм боксен анд боксен когда джава авто переводит из интеджека обхексат в инт
     * int name (int n Integer n);
     *
     * тоже самое относится к конструкторам
     *
     * ели не указат о кого наследуется метод то касс наследуется от Object
     *
     * пустой констуктор - дефолдный
     *
     * когда в одном классе в двух методоах повторфяется this.namw  это плохо
     * по хорошему нужно вызвать конструктор в нутри другого
     *
     * public Person(String name){
     * this.name = name;
     * }
     *
     * public Person(String name, int age) {
     * this(name);
     * this.age = age;
     * }
     * jdthkjf;byu lkz rjyhernjhf
     * овер для конструктора
     * делает отлько 1 строкой в коде
     * когда 1 из знкение известно а другое выисляется например
     *
     * используя дефолдный класс можно заполнить только те поля которые нужны
     *
     * скоуп - зоны ивдимости
     *
     * если нужно сохранить константу то использается static
     * к статическим переменым обращение через класс а не метод
     *
     * если данные которые нужны в методе пирходят снаружи то его можно сделать статик
     * и к нему нужно обращатся через класс, не нужно создавать экземпляр класса
     *
     * если метод не статик нужо создать экземпляр объекта
     *
     * когда создаем класс и там методы которые не используют поля класса не меняют их,
     * то что является уилитарным классом которые не несет нагрузки
     *
     * для переменных задание констант переенные которые не меняют значение,
     * для таких переменных которые задаются зачения только 1 раз
     *
     * витри статик метода обращение только к стати полм и стат переменным
     * иногда могут быть не статик мтеоды со статик полями
     *
     *
     * !!!полиморфизм
     * означает ввозмодность менять поведение
     * можно сдлать так что у нас у потомка помведение в каком то методе будет менятьс
     * нжно использовать ключевое слово супер при обращении к методу предка (одинаковые имена у методом)
     * обязательно добавить анноатцию
     * @Override
     *
     * по цепочке можно по супер дойти, но супер - это непосредсвенно предок
     *
     *
     * супер это обрапщение к родителю
     * this - этот текущий объект "я"
     * ели в род поле доступ протектет то можно обратится к оплю через this
     * поле privet  тоде унаслеован но к нему нет доступа
     * можно оьратится через сет
     * можно передавать
     * протектер ег видно в пакее всем коассам даже если они не наследовалтсь
     * пакет от предка к потомкам
     *
     * если в персон поросить перекрыть ту стринг
     * ерез генерацию ту стринг
     *
     * еслт раньше вызывалс от обхекта то тепепрь он прекрт
     * одитсто то нам нудно
     *
     * объекты оптомки пмогут прикидыватьсяя родителями
     * на любого потомка можно одеть маску родителя и для тех снаруджи этотпотом будет выглядеть как родитель
     * например эмплое и персон, у эмплоя етсь гет найм сет найм
     * если скадем сто емплой это персон то все методы так же вызовтся
     * но если у пе6рсон нет мтоды выйдет ошибка
     * Person jack = new Employee(///);
     * sout(((Emploe)jack.getSalary())
     *
     *
     */


    public static void main(String[] args) {

    }

}
